!function (t, n) { "object" == typeof exports && "undefined" != typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define(n) : (t = "undefined" != typeof globalThis ? globalThis : t || self).app = n() }(this, (function () { "use strict"; function t() { } function n(t) { return t() } function e() { return Object.create(null) } function o(t) { t.forEach(n) } function r(t) { return "function" == typeof t } function c(t, n) { return t != t ? n == n : t !== n || t && "object" == typeof t || "function" == typeof t } function i(t, n) { t.appendChild(n) } function u(t, n, e) { t.insertBefore(n, e || null) } function s(t) { t.parentNode && t.parentNode.removeChild(t) } function f(t) { return document.createElement(t) } let a; function l(t) { a = t } const d = [], p = []; let $ = []; const h = [], m = Promise.resolve(); let g = !1; function y(t) { $.push(t) } const b = new Set; let _ = 0; function x() { if (0 !== _) return; const t = a; do { try { for (;_ < d.length;) { const t = d[_]; _++, l(t), k(t.$$) } } catch (t) { throw d.length = 0, _ = 0, t } for (l(null), d.length = 0, _ = 0;p.length;)p.pop()(); for (let t = 0;t < $.length;t += 1) { const n = $[t]; b.has(n) || (b.add(n), n()) } $.length = 0 } while (d.length); for (;h.length;)h.pop()(); g = !1, b.clear(), l(t) } function k(t) { if (null !== t.fragment) { t.update(), o(t.before_update); const n = t.dirty; t.dirty = [-1], t.fragment && t.fragment.p(t.ctx, n), t.after_update.forEach(y) } } const v = new Set; let w; function E(t, n) { t && t.i && (v.delete(t), t.i(n)) } function j(t, e, c, i) { const { fragment: u, after_update: s } = t.$$; u && u.m(e, c), i || y((() => { const e = t.$$.on_mount.map(n).filter(r); t.$$.on_destroy ? t.$$.on_destroy.push(...e) : o(e), t.$$.on_mount = [] })), s.forEach(y) } function A(t, n) { const e = t.$$; null !== e.fragment && (!function (t) { const n = [], e = []; $.forEach((o => -1 === t.indexOf(o) ? n.push(o) : e.push(o))), e.forEach((t => t())), $ = n }(e.after_update), o(e.on_destroy), e.fragment && e.fragment.d(n), e.on_destroy = e.fragment = null, e.ctx = []) } function N(t, n) { -1 === t.$$.dirty[0] && (d.push(t), g || (g = !0, m.then(x)), t.$$.dirty.fill(0)), t.$$.dirty[n / 31 | 0] |= 1 << n % 31 } function O(n, r, c, i, u, f, d, p = [-1]) { const $ = a; l(n); const h = n.$$ = { fragment: null, ctx: [], props: f, update: t, not_equal: u, bound: e(), on_mount: [], on_destroy: [], on_disconnect: [], before_update: [], after_update: [], context: new Map(r.context || ($ ? $.$$.context : [])), callbacks: e(), dirty: p, skip_bound: !1, root: r.target || $.$$.root }; d && d(h.root); let m = !1; if (h.ctx = c ? c(n, r.props || {}, ((t, e, ...o) => { const r = o.length ? o[0] : e; return h.ctx && u(h.ctx[t], h.ctx[t] = r) && (!h.skip_bound && h.bound[t] && h.bound[t](r), m && N(n, t)), e })) : [], h.update(), m = !0, o(h.before_update), h.fragment = !!i && i(h.ctx), r.target) { if (r.hydrate) { const t = function (t) { return Array.from(t.childNodes) }(r.target); h.fragment && h.fragment.l(t), t.forEach(s) } else h.fragment && h.fragment.c(); r.intro && E(n.$$.fragment), j(n, r.target, r.anchor, r.customElement), x() } l($) } class T { $destroy() { A(this, 1), this.$destroy = t } $on(n, e) { if (!r(e)) return t; const o = this.$$.callbacks[n] || (this.$$.callbacks[n] = []); return o.push(e), () => { const t = o.indexOf(e); -1 !== t && o.splice(t, 1) } } $set(t) { var n; this.$$set && (n = t, 0 !== Object.keys(n).length) && (this.$$.skip_bound = !0, this.$$set(t), this.$$.skip_bound = !1) } } function C(n) { let e, o, r, c, a; return { c() { var t, c, i, u; e = f("main"), o = f("div"), t = n[0], r = document.createTextNode(t), c = o, i = "class", null == (u = "icon svelte-1p7wi1o") ? c.removeAttribute(i) : c.getAttribute(i) !== u && c.setAttribute(i, u) }, m(t, s) { var f, l, d, p; u(t, e, s), i(e, o), i(o, r), c || (f = o, l = "click", d = n[1], f.addEventListener(l, d, p), a = () => f.removeEventListener(l, d, p), c = !0) }, p(t, [n]) { 1 & n && function (t, n) { n = "" + n, t.data !== n && (t.data = n) }(r, t[0]) }, i: t, o: t, d(t) { t && s(e), c = !1, a() } } } function L(t, n, e) { let { icon: o } = n, { link: r } = n; return t.$$set = t => { "icon" in t && e(0, o = t.icon), "link" in t && e(2, r = t.link) }, [o, function () { window.location.href = r }, r] } class S extends T { constructor(t) { super(), O(this, t, L, C, c, { icon: 0, link: 2 }) } } function q(n) { let e, o, r; return o = new S({ props: { icon: "ðŸš€", link: "https://pnpm.io/zh/filtering" } }), { c() { var t; e = f("main"), (t = o.$$.fragment) && t.c() }, m(t, n) { u(t, e, n), j(o, e, null), r = !0 }, p: t, i(t) { r || (E(o.$$.fragment, t), r = !0) }, o(t) { !function (t, n, e, o) { if (t && t.o) { if (v.has(t)) return; v.add(t), w.c.push((() => { v.delete(t), o && (e && t.d(1), o()) })), t.o(n) } else o && o() }(o.$$.fragment, t), r = !1 }, d(t) { t && s(e), A(o) } } } return new class extends T { constructor(t) { super(), O(this, t, null, q, c, {}) } }({ target: document.body, props: { name: "world" } }) }));
